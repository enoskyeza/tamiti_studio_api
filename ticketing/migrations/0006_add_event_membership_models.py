# Generated by Django 5.2.4 on 2025-09-16 18:40

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('ticketing', '0005_remove_temporaryuser_unique_temp_user_per_event_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('role', models.CharField(choices=[('owner', 'Event Owner'), ('manager', 'Event Manager'), ('staff', 'Event Staff')], default='staff', max_length=20)),
                ('permissions', models.JSONField(default=dict, help_text='Granular permissions for this membership')),
                ('invited_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this membership expires (for temporary users)', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='ticketing.event')),
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invitations_sent', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['role', 'user__username'],
            },
        ),
        migrations.CreateModel(
            name='BatchMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('can_activate', models.BooleanField(default=True)),
                ('can_verify', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('assigned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_assignments_made', to=settings.AUTH_USER_MODEL)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_memberships', to='ticketing.batch')),
                ('membership', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_assignments', to='ticketing.eventmembership')),
            ],
            options={
                'ordering': ['batch__batch_number', 'membership__user__username'],
            },
        ),
        migrations.AddIndex(
            model_name='eventmembership',
            index=models.Index(fields=['event', 'is_active'], name='ticketing_e_event_i_a64949_idx'),
        ),
        migrations.AddIndex(
            model_name='eventmembership',
            index=models.Index(fields=['user', 'is_active'], name='ticketing_e_user_id_5ffad1_idx'),
        ),
        migrations.AddIndex(
            model_name='eventmembership',
            index=models.Index(fields=['expires_at'], name='ticketing_e_expires_411846_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventmembership',
            unique_together={('user', 'event')},
        ),
        migrations.AlterUniqueTogether(
            name='batchmembership',
            unique_together={('batch', 'membership')},
        ),
    ]
