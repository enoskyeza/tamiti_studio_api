# Generated by Django 5.2.4 on 2025-09-25 01:48

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0010_alter_customerprofile_uuid_alter_staffprofile_uuid_and_more'),
        ('finance', '0008_personaldebt_debt_creditor_name_not_empty_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CompanyRecurringTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(help_text='Transaction name/description', max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('transaction_type', models.CharField(choices=[('expense', 'Expense'), ('income', 'Income')], default='expense', max_length=20)),
                ('category', models.CharField(choices=[('food', 'Food & Dining'), ('transport', 'Transportation'), ('utilities', 'Utilities'), ('entertainment', 'Entertainment'), ('healthcare', 'Healthcare'), ('shopping', 'Shopping'), ('education', 'Education'), ('savings', 'Savings & Investment'), ('debt', 'Debt Payment'), ('rent', 'Rent & Housing'), ('insurance', 'Insurance'), ('subscriptions', 'Subscriptions'), ('gifts', 'Gifts & Donations'), ('transfer', 'Account Transfer'), ('transfer_fee', 'Transfer Fee'), ('loan_given', 'Loan Given'), ('other', 'Other')], max_length=50)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='monthly', max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, help_text='Leave blank for indefinite', null=True)),
                ('next_due_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('auto_create', models.BooleanField(default=False, help_text='Automatically create transactions when due')),
                ('requires_approval', models.BooleanField(default=True)),
                ('last_created_date', models.DateField(blank=True, null=True)),
                ('total_created', models.PositiveIntegerField(default=0)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_recurring_transactions', to='finance.account')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_recurring_transactions', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurring_transactions', to='accounts.department')),
            ],
            options={
                'ordering': ['next_due_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CompanySavingsGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(help_text='Savings goal name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Goal description and purpose')),
                ('target_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('current_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('start_date', models.DateField()),
                ('target_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='savings_goals', to='accounts.department')),
                ('savings_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_savings_goals', to='finance.account')),
            ],
            options={
                'ordering': ['-priority', '-target_date'],
            },
        ),
        migrations.CreateModel(
            name='CompanyBudget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(help_text='Budget name/title', max_length=100)),
                ('category', models.CharField(choices=[('food', 'Food & Dining'), ('transport', 'Transportation'), ('utilities', 'Utilities'), ('entertainment', 'Entertainment'), ('healthcare', 'Healthcare'), ('shopping', 'Shopping'), ('education', 'Education'), ('savings', 'Savings & Investment'), ('debt', 'Debt Payment'), ('rent', 'Rent & Housing'), ('insurance', 'Insurance'), ('subscriptions', 'Subscriptions'), ('gifts', 'Gifts & Donations'), ('transfer', 'Account Transfer'), ('transfer_fee', 'Transfer Fee'), ('loan_given', 'Loan Given'), ('other', 'Other')], max_length=50)),
                ('period', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='monthly', max_length=20)),
                ('allocated_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('spent_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('alert_threshold', models.DecimalField(decimal_places=2, default=80, help_text='Alert when spent percentage reaches this threshold', max_digits=5)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_company_budgets', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='budgets', to='accounts.department')),
            ],
            options={
                'ordering': ['-start_date', 'category'],
                'unique_together': {('department', 'category', 'start_date')},
            },
        ),
    ]
