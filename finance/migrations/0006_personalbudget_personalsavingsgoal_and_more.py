# Generated by Django 5.2.4 on 2025-09-10 18:14

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('finance', '0005_alter_account_uuid_alter_goal_uuid_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PersonalBudget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(help_text='Budget name/title', max_length=100)),
                ('category', models.CharField(choices=[('food', 'Food & Dining'), ('transport', 'Transportation'), ('utilities', 'Utilities'), ('entertainment', 'Entertainment'), ('healthcare', 'Healthcare'), ('shopping', 'Shopping'), ('education', 'Education'), ('savings', 'Savings & Investment'), ('debt', 'Debt Payment'), ('rent', 'Rent & Housing'), ('insurance', 'Insurance'), ('subscriptions', 'Subscriptions'), ('gifts', 'Gifts & Donations'), ('other', 'Other')], max_length=50)),
                ('period', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='monthly', max_length=20)),
                ('allocated_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('spent_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('alert_threshold', models.DecimalField(decimal_places=2, default=80, help_text='Alert when spent percentage reaches this threshold', max_digits=5)),
            ],
            options={
                'ordering': ['-start_date', 'category'],
            },
        ),
        migrations.CreateModel(
            name='PersonalSavingsGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('target_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('current_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('target_date', models.DateField()),
                ('created_date', models.DateField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_achieved', models.BooleanField(default=False)),
                ('achieved_date', models.DateField(blank=True, null=True)),
                ('auto_save_amount', models.DecimalField(decimal_places=2, default=0, help_text='Automatic savings amount per period', max_digits=10)),
                ('auto_save_frequency', models.CharField(blank=True, choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='monthly', max_length=20)),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='PersonalTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('type', models.CharField(choices=[('income', 'Income'), ('expense', 'Expense')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('description', models.TextField(help_text='Detailed description of the transaction')),
                ('transaction_charge', models.DecimalField(decimal_places=2, default=0, help_text='Fees/charges associated with this transaction', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('income_source', models.CharField(blank=True, choices=[('salary', 'Salary'), ('freelance', 'Freelance Work'), ('business', 'Business Income'), ('investment', 'Investment Returns'), ('rental', 'Rental Income'), ('gift', 'Gift/Allowance'), ('refund', 'Refund'), ('bonus', 'Bonus'), ('other', 'Other')], help_text='Required for income transactions', max_length=50)),
                ('expense_category', models.CharField(blank=True, choices=[('food', 'Food & Dining'), ('transport', 'Transportation'), ('utilities', 'Utilities'), ('entertainment', 'Entertainment'), ('healthcare', 'Healthcare'), ('shopping', 'Shopping'), ('education', 'Education'), ('savings', 'Savings & Investment'), ('debt', 'Debt Payment'), ('rent', 'Rent & Housing'), ('insurance', 'Insurance'), ('subscriptions', 'Subscriptions'), ('gifts', 'Gifts & Donations'), ('other', 'Other')], help_text='Required for expense transactions', max_length=50)),
                ('reason', models.TextField(help_text='Reason/purpose for this transaction')),
                ('date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('reference_number', models.CharField(blank=True, help_text='Bank reference, receipt number, etc.', max_length=100)),
                ('receipt_image', models.ImageField(blank=True, null=True, upload_to='personal_receipts/%Y/%m/')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Custom tags for categorization and search')),
                ('location', models.CharField(blank=True, help_text='Where the transaction occurred', max_length=200)),
                ('notes', models.TextField(blank=True, help_text='Additional notes')),
                ('is_recurring', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PersonalTransactionRecurring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(help_text='Name for this recurring transaction', max_length=200)),
                ('type', models.CharField(choices=[('income', 'Income'), ('expense', 'Expense')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('description', models.TextField()),
                ('frequency', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, help_text='Leave blank for indefinite', null=True)),
                ('income_source', models.CharField(blank=True, choices=[('salary', 'Salary'), ('freelance', 'Freelance Work'), ('business', 'Business Income'), ('investment', 'Investment Returns'), ('rental', 'Rental Income'), ('gift', 'Gift/Allowance'), ('refund', 'Refund'), ('bonus', 'Bonus'), ('other', 'Other')], max_length=50)),
                ('expense_category', models.CharField(blank=True, choices=[('food', 'Food & Dining'), ('transport', 'Transportation'), ('utilities', 'Utilities'), ('entertainment', 'Entertainment'), ('healthcare', 'Healthcare'), ('shopping', 'Shopping'), ('education', 'Education'), ('savings', 'Savings & Investment'), ('debt', 'Debt Payment'), ('rent', 'Rent & Housing'), ('insurance', 'Insurance'), ('subscriptions', 'Subscriptions'), ('gifts', 'Gifts & Donations'), ('other', 'Other')], max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('next_due_date', models.DateField()),
                ('last_created_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'ordering': ['next_due_date'],
            },
        ),
        migrations.AddField(
            model_name='account',
            name='description',
            field=models.TextField(blank=True, help_text='Additional account details'),
        ),
        migrations.AddField(
            model_name='account',
            name='is_active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='account',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='Required for personal accounts', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='account',
            name='scope',
            field=models.CharField(choices=[('company', 'Company'), ('personal', 'Personal')], default='company', max_length=20),
        ),
        migrations.AlterField(
            model_name='account',
            name='type',
            field=models.CharField(choices=[('bank', 'Bank'), ('mobile_money', 'Mobile Money'), ('wallet', 'Wallet'), ('paypal', 'Paypal'), ('cashbox', 'Cashbox'), ('personal_bank', 'Personal Bank Account'), ('airtel_money', 'Airtel Money'), ('mtn_money', 'MTN Mobile Money'), ('cash_wallet', 'Cash Wallet'), ('savings_account', 'Savings Account'), ('credit_card', 'Credit Card')], max_length=50),
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.CheckConstraint(condition=models.Q(('scope', 'company'), models.Q(('scope', 'personal'), ('owner__isnull', False)), _connector='OR'), name='personal_accounts_must_have_owner'),
        ),
        migrations.AddField(
            model_name='personalbudget',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='personal_budgets', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='personalsavingsgoal',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='savings_goals', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='personaltransaction',
            name='account',
            field=models.ForeignKey(limit_choices_to={'scope': 'personal'}, on_delete=django.db.models.deletion.CASCADE, to='finance.account'),
        ),
        migrations.AddField(
            model_name='personaltransaction',
            name='recurring_parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurring_instances', to='finance.personaltransaction'),
        ),
        migrations.AddField(
            model_name='personaltransaction',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='personal_transactions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='personaltransactionrecurring',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.account'),
        ),
        migrations.AddField(
            model_name='personaltransactionrecurring',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recurring_transactions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='personalbudget',
            unique_together={('user', 'category', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='personaltransaction',
            index=models.Index(fields=['user', 'type', 'date'], name='finance_per_user_id_3cfda0_idx'),
        ),
        migrations.AddIndex(
            model_name='personaltransaction',
            index=models.Index(fields=['user', 'expense_category'], name='finance_per_user_id_b979c8_idx'),
        ),
        migrations.AddIndex(
            model_name='personaltransaction',
            index=models.Index(fields=['account', 'date'], name='finance_per_account_27dc75_idx'),
        ),
    ]
